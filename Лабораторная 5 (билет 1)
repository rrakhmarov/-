НОМЕР 1 Python:
import numpy as np

def f(x):
    # Задаем значения функции в узлах интерполяции
    x_values = [0, 1, 2, 3, 4]
    y_values = [0, 0.5, 0.86603, 1, 0.86603]

    # Находим индекс узла, в котором находится точка x
    i = 0
    while x_values[i] <= x and i < len(x_values) - 1:
        i += 1

    # Вычисляем значение функции в заданной точке
    h = x_values[i + 1] - x_values[i]
    a = (y_values[i + 1] - y_values[i]) / h
    b = (y_values[i] - y_values[i - 1]) / h - h * a

    return a * (x - x_values[i]) + b * (x - x_values[i - 1]) + y_values[i]

def cubic_spline(x_values, y_values):
    # Количество узлов
    n = len(x_values)

    # Вычисляем разности узлов
    h = [x_values[i + 1] - x_values[i] for i in range(n - 1)]

    # Система уравнений для определения коэффициентов
    A = np.zeros((n, n))
    b = np.zeros(n)

    # Граничные условия для нулевой кривизны
    A[0][0] = 1
    A[n - 1][n - 1] = 1

    # Вычисление остальных уравнений системы
    for i in range(1, n - 1):
        A[i][i - 1] = h[i - 1]
        A[i][i] = 2 * (h[i - 1] + h[i])
        A[i][i + 1] = h[i]

        b[i] = 3 * ((y_values[i + 1] - y_values[i]) / h[i] - (y_values[i] - y_values[i - 1]) / h[i - 1])

    # Решение системы уравнений
    c = np.linalg.solve(A, b)

    # Коэффициенты кубических сплайнов
    a = []
    b = []
    c = []
    d = []

    for i in range(n - 1):
        a.append(y_values[i])
        b.append((y_values[i + 1] - y_values[i]) / h[i] - h[i] * c[i] - h[i] ** 2 * c[i] / 3)
        c.append(c[i])
        d.append((c[i + 1] - c[i]) / (3 * h[i]))

    return a, b, c, d

# Значения функции в узлах интерполяции
x_values = [0, 1, 2, 3, 4]
y_values = [0, 0.5, 0.86603, 1, 0.86603]

# Расчет коэффициентов кубического сплайна
a, b, c, d = cubic_spline(x_values, y_values)

# Вычисление значения функции в точке x* = 1.5
x_star = 1.5
i = 0
while x_values[i] <= x_star and i < len(x_values) - 1:
    i += 1

# Интерполяция кубическим сплайном
y_star = a[i] + b[i] * (x_star - x_values[i]) + c[i] * (x_star - x_values[i]) ** 2 + d[i] * (x_star - x_values[i]) ** 3

print(f"Значение функции в точке x* = {x_star}: {y_star}")

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
НОМЕР 2 C++:
#include <iostream>
#include <cmath>
#include <vector>

using namespace std;

double Lagrange(const vector<double>& x, const vector<double>& y, double x_val) {
  double result = 0;
  for (int i = 0; i < x.size(); ++i) {
    double basis = 1;
    for (int j = 0; j < x.size(); ++j) {
      if (i != j) {
        basis *= (x_val - x[j]) / (x[i] - x[j]);
      }
    }
    result += y[i] * basis;
  }
  return result;
}

int main() {
  // Значения функции y = sin(x) в точках x = 0.1, 0.2π, 0.3π, 0.4π
  vector<double> x = {0.1, 0.2 * M_PI, 0.3 * M_PI, 0.4 * M_PI};
  vector<double> y;
  for (double xi : x) {
    y.push_back(sin(xi));
  }

  // Вычисление интерполяционного многочлена Лагранжа
  double x_val = 0.25 * M_PI; // Точка, в которой вычисляем значение
  double y_interpol = Lagrange(x, y, x_val);

  // Вычисление погрешности
  double y_true = sin(x_val);
  double error = abs(y_true - y_interpol);

  cout << "Интерполированное значение в точке x = " << x_val << ": " << y_interpol << endl;
  cout << "Погрешность: " << error << endl;

  return 0;
}

