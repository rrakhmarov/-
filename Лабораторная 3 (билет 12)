НОМЕР 1 Python:
import math

def integral_rectangles(f, a, b, n):
  h = (b - a) / n
  sum = 0
  for i in range(1, n + 1):
    x_i = a + i * h
    sum += f(x_i)
  return h * sum

def integral_trapezoids(f, a, b, n):
  h = (b - a) / n
  sum = f(a) + f(b)
  for i in range(1, n):
    x_i = a + i * h
    sum += 2 * f(x_i)
  return h / 2 * sum

def integral_simpson(f, a, b, n):
  if n % 2 != 0:
    raise ValueError("n must be even for Simpson's rule")
  h = (b - a) / n
  sum_odd = 0
  sum_even = 0
  for i in range(1, int(n/2)+1):
    x_odd = a + (2*i - 1) * h
    sum_odd += f(x_odd)
  for i in range(1, int(n/2)):
    x_even = a + 2*i * h
    sum_even += f(x_even)
  return h/3 * (f(a) + 4*sum_odd + 2*sum_even + f(b))

def f(x):
  return x**4 / (12 + x**2)

a = 1
b = 2
epsilon = 10**(-6)

n = 1
while True:
  result_n = integral_rectangles(f, a, b, n)
  result_2n = integral_rectangles(f, a, b, 2*n)
  if abs(result_2n - result_n) < epsilon:
    break
  n *= 2

print(f"Метод прямоугольников: {result_2n:.6f}")

n = 1
while True:
  result_n = integral_trapezoids(f, a, b, n)
  result_2n = integral_trapezoids(f, a, b, 2*n)
  if abs(result_2n - result_n) < epsilon:
    break
  n *= 2

print(f"Метод трапеций: {result_2n:.6f}")

n = 2
while True:
  result_n = integral_simpson(f, a, b, n)
  result_2n = integral_simpson(f, a, b, 2*n)
  if abs(result_2n - result_n) < epsilon:
    break
  n *= 2

print(f"Метод Симпсона: {result_2n:.6f}")
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
НОМЕР 2 Python:
import math

def integral_rectangles(f, a, b, n):
  h = (b - a) / n
  sum = 0
  for i in range(1, n + 1):
    x_i = a + i * h
    sum += f(x_i)
  return h * sum

def integral_trapezoids(f, a, b, n):
  h = (b - a) / n
  sum = f(a) + f(b)
  for i in range(1, n):
    x_i = a + i * h
    sum += 2 * f(x_i)
  return h / 2 * sum

def integral_simpson(f, a, b, n):
  if n % 2 != 0:
    raise ValueError("n must be even for Simpson's rule")
  h = (b - a) / n
  sum_odd = 0
  sum_even = 0
  for i in range(1, int(n/2)+1):
    x_odd = a + (2*i - 1) * h
    sum_odd += f(x_odd)
  for i in range(1, int(n/2)):
    x_even = a + 2*i * h
    sum_even += f(x_even)
  return h/3 * (f(a) + 4*sum_odd + 2*sum_even + f(b))

def f(x):
  return math.exp(-2*x) * math.sin(12*x)

a = 0
b = 8
epsilon = 10**(-6)

n = 1
while True:
  result_n = integral_rectangles(f, a, b, n)
  result_2n = integral_rectangles(f, a, b, 2*n)
  if abs(result_2n - result_n) < epsilon:
    break
  n *= 2

print(f"Метод прямоугольников: {result_2n:.6f}")

n = 1
while True:
  result_n = integral_trapezoids(f, a, b, n)
  result_2n = integral_trapezoids(f, a, b, 2*n)
  if abs(result_2n - result_n) < epsilon:
    break
  n *= 2

print(f"Метод трапеций: {result_2n:.6f}")

n = 2
while True:
  result_n = integral_simpson(f, a, b, n)
  result_2n = integral_simpson(f, a, b, 2*n)
  if abs(result_2n - result_n) < epsilon:
    break
  n *= 2

print(f"Метод Симпсона: {result_2n:.6f}")
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
НОМЕР 3 C++:
#include <iostream>
#include <cmath>

using namespace std;

double sumSeries(int n) {
    double sum = 0;
    for (int k = 1; k <= n; k++) {
        sum += pow(1.0 / (2 * k - 1), 12) * pow(-1, k - 1);
    }
    return sum;
}

int main() {
    int n = 1000000; // Число членов ряда
    double result = sumSeries(n);

    cout << "Сумма ряда: " << result << endl;

    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
НОМЕР 4 C++:
#include <iostream>
#include <cmath>

using namespace std;

double f(double x, int k) {
    return pow(-1, k) * (sin(k * x) + 12 + pow(k, 2));
}

double integrate(double a, double b, int n) {
    double h = (b - a) / n;
    double sum = 0.5 * (f(a, 1) + f(b, n));

    for (int i = 1; i < n; i++) {
        sum += f(a + h * i, i + 1);
    }

    return sum * h;
}

int main() {
    double a = 0;
    double b = 1;
    int n = 1000000;

    double result = integrate(a, b, n);
    cout << "Сумма ряда: " << result << endl;

    return 0;
}
